general {
    # lock_cmd = notify-send "lock!"          # dbus/sysd lock command (loginctl lock-session) 
    # unlock_cmd = notify-send "unlock!"      # same as above, but unlock
    # ignore_dbus_inhibit = false             # whether to ignore dbus-sent idle-inhibit requests (used by e.g. firefox or steam)
    lock_cmd = pidof hyprlock || hyprlock # avoid starting multiple hyprlock instances.
    before_sleep_cmd = loginctl lock-session    # lock before suspend.
    after_sleep_cmd = hyprctl dispatch dpms on  # to avoid having to press a key twice to turn on the display.
}

# listener {
#     timeout = 300                           # 5min
#     on-timeout = hyprlock                   # command to run when timeout has passed
#     on-resume = notify-send "Welcome back!" # command to run when activity is detected after timeout has fired.
# }

# listener {
#     timeout = 380                           # 5.5min
#     on-timeout = hyprctl dispatch dpms off  # command to run when timeout has passed
#     on-resume = hyprctl dispatch dpms on    # command to run when activity is detected after timeout has fired.
# }

# Screenlock
listener {
    timeout = 15
    # timeout = 180                           # in seconds
    on-timeout = loginctl lock-session # command to run when timeout has passed
    on-resume = notify-send "Welcome back to your desktop!"  # command to run when activity is detected after timeout has fired.
}

# Screen off
listener {
    timeout = 20
    # timeout = 360                                 # 5.5min
    on-timeout = hyprctl dispatch dpms off        # screen off when timeout has passed
    on-resume = hyprctl dispatch dpms on          # screen on when activity is detected after timeout has fired.
}

# Suspend
# listener {
#     timeout = 360                            # in seconds
#     on-timeout = systemctl suspend # command to run when timeout has passed
#     # on-resume = notify-send "Welcome back to your desktop!"  # command to run when activity is detected after timeout has fired.
# }
